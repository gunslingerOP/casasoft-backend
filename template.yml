# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09

Description: >-
  Website & Mobile starter project

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform: AWS::Serverless-2016-10-31

Parameters:
  AppId:
    Type: String

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-all-items.js
  getAllIngredientsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/get-all-ingredients.getAllIngredientsHandler
      Runtime: nodejs10.x
      MemorySize: 384
      Timeout: 60
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref User

        - DynamoDBCrudPolicy:
            TableName: !Ref Ingredients
      Environment:
        Variables:
          ACCESS_KEY_ID: ${ACCESS_KEY_ID}
          KEY_SECRET: ${KEY_SECRET}
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  modifyIngredientByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/modifyIngredient.modifyIngredientHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      Description: A function that gets an ingredient by its ID
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref User

        - DynamoDBCrudPolicy:
            TableName: !Ref Ingredients
      Environment:
        Variables:
          USERS_TABLE: !Ref User
          INGREDIENTS_TABLE: !Ref Ingredients
      Events:
        Api:
          Type: Api
          Properties:
            Path: /ingredient/{id}
            Method: PUT

  getIngredientByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/get-by-id.getIngredientHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      Description: A function that gets an ingredient by its ID
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref User

        - DynamoDBCrudPolicy:
            TableName: !Ref Ingredients
      Environment:
        Variables:
          USERS_TABLE: !Ref User
          INGREDIENTS_TABLE: !Ref Ingredients
      Events:
        Api:
          Type: Api
          Properties:
            Path: /ingredient/{id}
            Method: GET
  createItemHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/create-ingredient.createItemHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      Description: A function that gets an ingredient by its ID
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref User

        - DynamoDBCrudPolicy:
            TableName: !Ref Ingredients
      Environment:
        Variables:
          USERS_TABLE: !Ref User
          INGREDIENTS_TABLE: !Ref Ingredients
      Events:
        Api:
          Type: Api
          Properties:
            Path: /ingredient
            Method: POST

  # # Each Lambda function is defined by properties:
  # # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # # This is a Lambda function config associated with the source code: put-item.js
  deleteItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/delete-item.deleteItemHandler
      Runtime: nodejs10.x
      MemorySize: 128
      Timeout: 60
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref User

        - DynamoDBCrudPolicy:
            TableName: !Ref Ingredients

      Events:
        Api:
          Type: Api
          Properties:
            Path: /ingredient/{id}
            Method: DELETE
  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # DynamoDB table to store item: {id: <ID>, name: <NAME>}
  User:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: UserName
          AttributeType: S
        - AttributeName: UserEmail
          AttributeType: S

      KeySchema:
        - AttributeName: UserName
          KeyType: HASH
        - AttributeName: UserEmail
          KeyType: RANGE
      TableName: User
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"

  Ingredients:
    Type: AWS::DynamoDB::Table
    DependsOn: User
    Properties:
      AttributeDefinitions:
        - AttributeName: IngredientId
          AttributeType: S

        - AttributeName: UserName
          AttributeType: S
      KeySchema:
        - AttributeName: IngredientId
          KeyType: HASH
        - AttributeName: UserName
          KeyType: RANGE
      TableName: Ingredients
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      GlobalSecondaryIndexes:
        - IndexName: indexByUser
          KeySchema:
            - AttributeName: UserName
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"
